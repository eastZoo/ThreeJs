/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./public/models/AnimatedMorphSphere.gltf
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GUI } from "dat.gui";

const AnimatedMorphSphere = (props) => {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(
    "./models/AnimatedMorphSphere.gltf"
  );
  const { actions, names } = useAnimations(animations, group);
  const [mesh, setMesh] = useState(
    nodes.AnimatedMorphSphere.morphTargetInfluences
  );

  // 드래그 처음 세팅 시작 값
  var params = {
    morphTargetX: 0,
    morphTargetY: 0,
  };

  console.log(nodes.AnimatedMorphSphere);
  useEffect(() => {
    // actions[names[0]].reset().fadeIn(0.5).play();
    setMesh(nodes.AnimatedMorphSphere.morphTargetInfluences);
    let gui = new GUI();
    let morphFolder = gui.addFolder("체형크기");
    morphFolder
      .add(params, "morphTargetX", 0, 1)
      .step(0.1)
      .onChange(function (value) {
        mesh[0] = value;
      });
    morphFolder
      .add(params, "morphTargetY", 0, 1)
      .step(0.1)
      .onChange(function (value) {
        mesh[1] = value;
      });
  }, []);
  return (
    <group ref={group} {...props} dispose={null}>
      <group>
        <mesh
          name="AnimatedMorphSphere"
          geometry={nodes.AnimatedMorphSphere.geometry}
          material={materials["No Name"]}
          morphTargetDictionary={
            nodes.AnimatedMorphSphere.morphTargetDictionary
          }
          morphTargetInfluences={
            nodes.AnimatedMorphSphere.morphTargetInfluences
          }
          rotation={[Math.PI / 2, 0, -Math.PI]}
          scale={100}
        />
      </group>
    </group>
  );
};
export default AnimatedMorphSphere;

useGLTF.preload("./models/AnimatedMorphSphere.gltf");
